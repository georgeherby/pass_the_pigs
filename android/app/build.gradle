plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "dev.georgeherby.pass_the_pigs"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "dev.georgeherby.pass_the_pigs"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode= flutterVersionCode.toInteger()
        versionName= flutterVersionName
    }

    signingConfigs {
            release {
                if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                    storeFile = file(System.getenv()["CM_KEYSTORE_PATH"])
                    storePassword = System.getenv()["CM_KEYSTORE_PASSWORD"]
                    keyAlias = System.getenv()["CM_KEY_ALIAS"]
                    keyPassword = System.getenv()["CM_KEY_PASSWORD"]
                } else {
                    keyAlias =  keystoreProperties['keyAlias']
                    keyPassword = keystoreProperties['keyPassword']
                    storeFile =  keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                    storePassword= keystoreProperties['storePassword']
                }
            }
    }

    buildTypes {
        release {
            signingConfig = signingConfigs.release
            minifyEnabled = true
            // proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
        debug {
            signingConfig = signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}
